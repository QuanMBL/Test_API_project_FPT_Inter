#!/usr/bin/env python3
"""
Script ƒë·ªÉ d·ªçn d·∫πp c√°c dashboard tr√πng l·∫∑p trong Grafana
T√¨m v√† x√≥a c√°c dashboard c√≥ t√™n gi·ªëng nhau, ch·ªâ gi·ªØ l·∫°i dashboard m·ªõi nh·∫•t
"""

import requests
import json
import sys
from collections import defaultdict
from datetime import datetime

# C·∫•u h√¨nh Grafana
GRAFANA_URL = "http://localhost:3000"
GRAFANA_USER = "admin"
GRAFANA_PASSWORD = "admin123"

def get_grafana_auth():
    """L·∫•y token x√°c th·ª±c t·ª´ Grafana"""
    try:
        response = requests.get(
            f"{GRAFANA_URL}/api/org",
            auth=(GRAFANA_USER, GRAFANA_PASSWORD),
            timeout=10
        )
        
        if response.status_code == 200:
            print("‚úÖ S·ª≠ d·ª•ng x√°c th·ª±c c∆° b·∫£n")
            return "basic_auth"
        else:
            print(f"‚ùå X√°c th·ª±c c∆° b·∫£n th·∫•t b·∫°i: {response.status_code}")
            return None
    except Exception as e:
        print(f"‚ùå L·ªói x√°c th·ª±c: {e}")
        return None

def get_all_dashboards(auth_token):
    """L·∫•y t·∫•t c·∫£ dashboard t·ª´ Grafana"""
    try:
        search_url = f"{GRAFANA_URL}/api/search?type=dash-db"
        
        if auth_token == "basic_auth":
            response = requests.get(
                search_url,
                auth=(GRAFANA_USER, GRAFANA_PASSWORD),
                timeout=10
            )
        else:
            headers = {"Authorization": f"Bearer {auth_token}"}
            response = requests.get(search_url, headers=headers, timeout=10)
        
        if response.status_code == 200:
            return response.json()
        else:
            print(f"‚ùå L·ªói l·∫•y danh s√°ch dashboard: {response.status_code}")
            return []
    except Exception as e:
        print(f"‚ùå L·ªói k·∫øt n·ªëi: {e}")
        return []

def get_dashboard_details(dashboard_uid, auth_token):
    """L·∫•y th√¥ng tin chi ti·∫øt dashboard"""
    try:
        get_url = f"{GRAFANA_URL}/api/dashboards/uid/{dashboard_uid}"
        
        if auth_token == "basic_auth":
            response = requests.get(
                get_url,
                auth=(GRAFANA_USER, GRAFANA_PASSWORD),
                timeout=10
            )
        else:
            headers = {"Authorization": f"Bearer {auth_token}"}
            response = requests.get(get_url, headers=headers, timeout=10)
        
        if response.status_code == 200:
            return response.json()
        return None
    except Exception as e:
        print(f"‚ùå L·ªói l·∫•y chi ti·∫øt dashboard {dashboard_uid}: {e}")
        return None

def delete_dashboard(dashboard_uid, auth_token):
    """X√≥a dashboard"""
    try:
        delete_url = f"{GRAFANA_URL}/api/dashboards/uid/{dashboard_uid}"
        
        if auth_token == "basic_auth":
            response = requests.delete(
                delete_url,
                auth=(GRAFANA_USER, GRAFANA_PASSWORD),
                timeout=10
            )
        else:
            headers = {"Authorization": f"Bearer {auth_token}"}
            response = requests.delete(delete_url, headers=headers, timeout=10)
        
        if response.status_code == 200:
            return True
        else:
            print(f"‚ùå L·ªói x√≥a dashboard {dashboard_uid}: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå L·ªói x√≥a dashboard {dashboard_uid}: {e}")
        return False

def find_duplicate_dashboards(dashboards, auth_token):
    """T√¨m c√°c dashboard tr√πng l·∫∑p"""
    # Nh√≥m dashboard theo title
    title_groups = defaultdict(list)
    
    for dashboard in dashboards:
        title = dashboard.get('title', 'Unknown')
        title_groups[title].append(dashboard)
    
    duplicates = {}
    for title, dash_list in title_groups.items():
        if len(dash_list) > 1:
            # L·∫•y th√¥ng tin chi ti·∫øt ƒë·ªÉ so s√°nh version v√† th·ªùi gian
            detailed_dashboards = []
            for dash in dash_list:
                details = get_dashboard_details(dash['uid'], auth_token)
                if details:
                    dash_info = details['dashboard']
                    detailed_dashboards.append({
                        'uid': dash['uid'],
                        'id': dash['id'],
                        'title': dash['title'],
                        'url': dash['url'],
                        'version': dash_info.get('version', 1),
                        'updated': dash_info.get('updated', ''),
                        'created': dash_info.get('created', ''),
                        'original': dash
                    })
            
            # S·∫Øp x·∫øp theo version (cao nh·∫•t) v√† th·ªùi gian c·∫≠p nh·∫≠t (m·ªõi nh·∫•t)
            detailed_dashboards.sort(key=lambda x: (x['version'], x['updated']), reverse=True)
            
            # Dashboard ƒë·∫ßu ti√™n l√† m·ªõi nh·∫•t, c√°c dashboard c√≤n l·∫°i l√† tr√πng l·∫∑p
            duplicates[title] = {
                'keep': detailed_dashboards[0],
                'remove': detailed_dashboards[1:]
            }
    
    return duplicates

def cleanup_duplicates(auth_token, dry_run=True):
    """D·ªçn d·∫πp dashboard tr√πng l·∫∑p"""
    print("üîç T√¨m ki·∫øm dashboard tr√πng l·∫∑p...")
    
    # L·∫•y t·∫•t c·∫£ dashboard
    dashboards = get_all_dashboards(auth_token)
    if not dashboards:
        print("‚ùå Kh√¥ng th·ªÉ l·∫•y danh s√°ch dashboard")
        return False
    
    print(f"üìä T√¨m th·∫•y {len(dashboards)} dashboard")
    
    # T√¨m dashboard tr√πng l·∫∑p
    duplicates = find_duplicate_dashboards(dashboards, auth_token)
    
    if not duplicates:
        print("‚úÖ Kh√¥ng c√≥ dashboard tr√πng l·∫∑p")
        return True
    
    print(f"\nüîç T√¨m th·∫•y {len(duplicates)} nh√≥m dashboard tr√πng l·∫∑p:")
    
    total_to_remove = 0
    for title, group in duplicates.items():
        print(f"\nüìã Dashboard: {title}")
        print(f"   ‚úÖ Gi·ªØ l·∫°i: {group['keep']['title']} (ID: {group['keep']['id']}, Version: {group['keep']['version']})")
        print(f"   üóëÔ∏è S·∫Ω x√≥a {len(group['remove'])} dashboard:")
        
        for dash in group['remove']:
            print(f"      - {dash['title']} (ID: {dash['id']}, Version: {dash['version']})")
            total_to_remove += 1
    
    if dry_run:
        print(f"\nüîç CH·∫†Y TH·ª¨ - S·∫Ω x√≥a {total_to_remove} dashboard tr√πng l·∫∑p")
        print("üí° ƒê·ªÉ th·ª±c s·ª± x√≥a, ch·∫°y script v·ªõi --execute")
        return True
    
    # X√°c nh·∫≠n x√≥a
    print(f"\n‚ö†Ô∏è B·∫°n s·∫Øp x√≥a {total_to_remove} dashboard tr√πng l·∫∑p!")
    confirm = input("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ti·∫øp t·ª•c? (yes/no): ")
    
    if confirm.lower() != 'yes':
        print("‚ùå H·ªßy b·ªè thao t√°c")
        return False
    
    # Th·ª±c hi·ªán x√≥a
    removed_count = 0
    for title, group in duplicates.items():
        print(f"\nüóëÔ∏è X√≥a dashboard tr√πng l·∫∑p: {title}")
        
        for dash in group['remove']:
            print(f"   ƒêang x√≥a: {dash['title']} (ID: {dash['id']})")
            if delete_dashboard(dash['uid'], auth_token):
                removed_count += 1
                print(f"   ‚úÖ ƒê√£ x√≥a: {dash['title']}")
            else:
                print(f"   ‚ùå L·ªói x√≥a: {dash['title']}")
    
    print(f"\nüìä K·∫øt qu·∫£: ƒê√£ x√≥a {removed_count}/{total_to_remove} dashboard tr√πng l·∫∑p")
    return removed_count == total_to_remove

def check_grafana_connection():
    """Ki·ªÉm tra k·∫øt n·ªëi ƒë·∫øn Grafana"""
    try:
        response = requests.get(f"{GRAFANA_URL}/api/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Grafana ƒëang ho·∫°t ƒë·ªông")
            return True
        else:
            print(f"‚ùå Ki·ªÉm tra s·ª©c kh·ªèe Grafana th·∫•t b·∫°i: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn Grafana: {e}")
        print("H√£y ƒë·∫£m b·∫£o Grafana ƒëang ch·∫°y tr√™n http://localhost:3000")
        return False

def main():
    """H√†m ch√≠nh"""
    print("üßπ Script D·ªçn D·∫πp Dashboard Tr√πng L·∫∑p")
    print("=" * 50)
    
    # Ki·ªÉm tra tham s·ªë
    dry_run = True
    if len(sys.argv) > 1 and sys.argv[1] == '--execute':
        dry_run = False
        print("‚ö†Ô∏è CH·∫æ ƒê·ªò TH·ª∞C THI - S·∫Ω x√≥a dashboard th·∫≠t!")
    else:
        print("üîç CH·∫æ ƒê·ªò CH·∫†Y TH·ª¨ - Ch·ªâ hi·ªÉn th·ªã dashboard s·∫Ω b·ªã x√≥a")
    
    # Ki·ªÉm tra k·∫øt n·ªëi Grafana
    if not check_grafana_connection():
        sys.exit(1)
    
    # L·∫•y token x√°c th·ª±c
    auth_token = get_grafana_auth()
    if not auth_token:
        print("‚ùå Kh√¥ng th·ªÉ l·∫•y token x√°c th·ª±c")
        sys.exit(1)
    
    # D·ªçn d·∫πp dashboard tr√πng l·∫∑p
    if cleanup_duplicates(auth_token, dry_run):
        if dry_run:
            print("\n‚úÖ Ch·∫°y th·ª≠ ho√†n t·∫•t!")
            print("üí° ƒê·ªÉ th·ª±c s·ª± x√≥a dashboard tr√πng l·∫∑p, ch·∫°y:")
            print("   python cleanup-duplicate-dashboards.py --execute")
        else:
            print("\nüéâ D·ªçn d·∫πp dashboard tr√πng l·∫∑p ho√†n t·∫•t!")
    else:
        print("\n‚ùå D·ªçn d·∫πp dashboard tr√πng l·∫∑p th·∫•t b·∫°i!")
        sys.exit(1)

if __name__ == "__main__":
    main()