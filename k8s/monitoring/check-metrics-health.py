#!/usr/bin/env python3
"""
Script ƒë·ªÉ ki·ªÉm tra s·ª©c kh·ªèe metrics v√† s·ª≠a l·ªói n·∫øu c·∫ßn
"""

import requests
import json
import time
from datetime import datetime

# C·∫•u h√¨nh
PROMETHEUS_URL = "http://localhost:9090"
GRAFANA_URL = "http://localhost:3000"
GRAFANA_USER = "admin"
GRAFANA_PASSWORD = "admin123"

def check_prometheus_connection():
    """Ki·ªÉm tra k·∫øt n·ªëi Prometheus"""
    try:
        response = requests.get(f"{PROMETHEUS_URL}/api/v1/query?query=up", timeout=10)
        if response.status_code == 200:
            print("‚úÖ Prometheus ƒëang ho·∫°t ƒë·ªông")
            return True
        else:
            print(f"‚ùå Prometheus kh√¥ng ph·∫£n h·ªìi: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn Prometheus: {e}")
        return False

def check_grafana_connection():
    """Ki·ªÉm tra k·∫øt n·ªëi Grafana"""
    try:
        response = requests.get(f"{GRAFANA_URL}/api/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Grafana ƒëang ho·∫°t ƒë·ªông")
            return True
        else:
            print(f"‚ùå Grafana kh√¥ng ph·∫£n h·ªìi: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn Grafana: {e}")
        return False

def check_api_services_metrics():
    """Ki·ªÉm tra metrics t·ª´ c√°c API services"""
    services = ['user-api', 'product-api', 'order-api', 'payment-api']
    working_services = []
    
    for service in services:
        try:
            # Ki·ªÉm tra metric up
            query = f"up{{job=\"{service}\"}}"
            response = requests.get(f"{PROMETHEUS_URL}/api/v1/query?query={query}", timeout=5)
            
            if response.status_code == 200:
                data = response.json()
                if data['status'] == 'success' and data['data']['result']:
                    result = data['data']['result'][0]
                    if result['value'][1] == '1':
                        print(f"‚úÖ {service}: ƒêang ho·∫°t ƒë·ªông")
                        working_services.append(service)
                    else:
                        print(f"‚ùå {service}: Kh√¥ng ho·∫°t ƒë·ªông")
                else:
                    print(f"‚ö†Ô∏è {service}: Kh√¥ng c√≥ d·ªØ li·ªáu metrics")
            else:
                print(f"‚ùå {service}: L·ªói query Prometheus")
                
        except Exception as e:
            print(f"‚ùå {service}: L·ªói ki·ªÉm tra - {e}")
    
    return working_services

def check_specific_metrics():
    """Ki·ªÉm tra c√°c metrics c·ª• th·ªÉ"""
    metrics_to_check = [
        "process_cpu_seconds_total",
        "process_resident_memory_bytes", 
        "django_http_requests_total",
        "django_http_request_duration_seconds_sum"
    ]
    
    print("\nüîç Ki·ªÉm tra metrics c·ª• th·ªÉ:")
    for metric in metrics_to_check:
        try:
            query = f"{metric}{{job=~\"user-api|product-api|order-api|payment-api\"}}"
            response = requests.get(f"{PROMETHEUS_URL}/api/v1/query?query={query}", timeout=5)
            
            if response.status_code == 200:
                data = response.json()
                if data['status'] == 'success' and data['data']['result']:
                    count = len(data['data']['result'])
                    print(f"‚úÖ {metric}: {count} series")
                else:
                    print(f"‚ö†Ô∏è {metric}: Kh√¥ng c√≥ d·ªØ li·ªáu")
            else:
                print(f"‚ùå {metric}: L·ªói query")
                
        except Exception as e:
            print(f"‚ùå {metric}: L·ªói - {e}")

def test_dashboard_queries():
    """Test c√°c query ƒë∆∞·ª£c s·ª≠ d·ª•ng trong dashboard"""
    print("\nüß™ Test c√°c query dashboard:")
    
    test_queries = [
        ("T·ªïng services", "sum(up{job=~\"user-api|product-api|order-api|payment-api\"})"),
        ("CPU trung b√¨nh", "avg(rate(process_cpu_seconds_total{job=~\"user-api|product-api|order-api|payment-api\"}[5m]) * 100)"),
        ("Memory t·ªïng", "sum(process_resident_memory_bytes{job=~\"user-api|product-api|order-api|payment-api\"})"),
        ("Error rate", "sum(rate(django_http_requests_total{job=~\"user-api|product-api|order-api|payment-api\",status=~\"4..|5..\"}[5m])) / sum(rate(django_http_requests_total{job=~\"user-api|product-api|order-api|payment-api\"}[5m])) * 100")
    ]
    
    for name, query in test_queries:
        try:
            response = requests.get(f"{PROMETHEUS_URL}/api/v1/query?query={query}", timeout=10)
            if response.status_code == 200:
                data = response.json()
                if data['status'] == 'success' and data['data']['result']:
                    value = data['data']['result'][0]['value'][1]
                    print(f"‚úÖ {name}: {value}")
                else:
                    print(f"‚ö†Ô∏è {name}: Kh√¥ng c√≥ d·ªØ li·ªáu")
            else:
                print(f"‚ùå {name}: L·ªói query")
        except Exception as e:
            print(f"‚ùå {name}: L·ªói - {e}")

def main():
    """H√†m ch√≠nh"""
    print("üîç Ki·ªÉm tra s·ª©c kh·ªèe Metrics v√† Dashboard")
    print("=" * 50)
    print(f"‚è∞ Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    # Ki·ªÉm tra k·∫øt n·ªëi
    prometheus_ok = check_prometheus_connection()
    grafana_ok = check_grafana_connection()
    
    if not prometheus_ok:
        print("\n‚ùå Prometheus kh√¥ng ho·∫°t ƒë·ªông. H√£y ki·ªÉm tra:")
        print("   ‚Ä¢ Docker containers ƒëang ch·∫°y: docker ps")
        print("   ‚Ä¢ Prometheus container: docker logs prometheus-container")
        return
    
    if not grafana_ok:
        print("\n‚ùå Grafana kh√¥ng ho·∫°t ƒë·ªông. H√£y ki·ªÉm tra:")
        print("   ‚Ä¢ Docker containers ƒëang ch·∫°y: docker ps")
        print("   ‚Ä¢ Grafana container: docker logs grafana-container")
        return
    
    # Ki·ªÉm tra API services
    print("\nüîç Ki·ªÉm tra API Services:")
    working_services = check_api_services_metrics()
    
    if not working_services:
        print("\n‚ùå Kh√¥ng c√≥ API service n√†o ƒëang ho·∫°t ƒë·ªông!")
        print("   H√£y ki·ªÉm tra:")
        print("   ‚Ä¢ Docker containers: docker ps")
        print("   ‚Ä¢ API logs: docker logs user-api-container")
        print("   ‚Ä¢ API logs: docker logs product-api-container")
        print("   ‚Ä¢ API logs: docker logs order-api-container")
        print("   ‚Ä¢ API logs: docker logs payment-api-container")
        return
    
    print(f"\n‚úÖ C√≥ {len(working_services)} services ƒëang ho·∫°t ƒë·ªông: {', '.join(working_services)}")
    
    # Ki·ªÉm tra metrics c·ª• th·ªÉ
    check_specific_metrics()
    
    # Test dashboard queries
    test_dashboard_queries()
    
    print("\nüéâ Ki·ªÉm tra ho√†n t·∫•t!")
    print("\nüí° N·∫øu dashboard v·∫´n kh√¥ng hi·ªÉn th·ªã d·ªØ li·ªáu:")
    print("   ‚Ä¢ ƒê·ª£i 1-2 ph√∫t ƒë·ªÉ metrics ƒë∆∞·ª£c thu th·∫≠p")
    print("   ‚Ä¢ Refresh dashboard trong Grafana")
    print("   ‚Ä¢ Ki·ªÉm tra time range trong dashboard")
    print("   ‚Ä¢ ƒê·∫£m b·∫£o c√°c API services ƒëang nh·∫≠n requests")

if __name__ == "__main__":
    main()
