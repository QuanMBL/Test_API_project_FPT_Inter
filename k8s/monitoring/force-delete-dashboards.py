#!/usr/bin/env python3
"""
Script x√≥a dashboard b·∫±ng c√°ch s·ª≠ d·ª•ng API kh√°c
Th·ª≠ nhi·ªÅu ph∆∞∆°ng ph√°p x√≥a dashboard
"""

import requests
import json
import sys

# C·∫•u h√¨nh Grafana
GRAFANA_URL = "http://localhost:3000"
GRAFANA_USER = "admin"
GRAFANA_PASSWORD = "admin123"

# Dashboard c·∫ßn gi·ªØ l·∫°i
KEEP_DASHBOARD = "all_4api_1_v2 - Dashboard t·ªïng quan 4 API Services"

def get_grafana_auth():
    """L·∫•y token x√°c th·ª±c t·ª´ Grafana"""
    try:
        response = requests.get(
            f"{GRAFANA_URL}/api/org",
            auth=(GRAFANA_USER, GRAFANA_PASSWORD),
            timeout=10
        )
        
        if response.status_code == 200:
            print("‚úÖ S·ª≠ d·ª•ng x√°c th·ª±c c∆° b·∫£n")
            return "basic_auth"
        else:
            print(f"‚ùå X√°c th·ª±c c∆° b·∫£n th·∫•t b·∫°i: {response.status_code}")
            return None
    except Exception as e:
        print(f"‚ùå L·ªói x√°c th·ª±c: {e}")
        return None

def get_all_dashboards(auth_token):
    """L·∫•y t·∫•t c·∫£ dashboard t·ª´ Grafana"""
    try:
        search_url = f"{GRAFANA_URL}/api/search?type=dash-db"
        
        if auth_token == "basic_auth":
            response = requests.get(
                search_url,
                auth=(GRAFANA_USER, GRAFANA_PASSWORD),
                timeout=10
            )
        else:
            headers = {"Authorization": f"Bearer {auth_token}"}
            response = requests.get(search_url, headers=headers, timeout=10)
        
        if response.status_code == 200:
            return response.json()
        else:
            print(f"‚ùå L·ªói l·∫•y danh s√°ch dashboard: {response.status_code}")
            return []
    except Exception as e:
        print(f"‚ùå L·ªói k·∫øt n·ªëi: {e}")
        return []

def force_delete_dashboard(dashboard_id, dashboard_uid, auth_token):
    """Th·ª≠ nhi·ªÅu c√°ch x√≥a dashboard"""
    print(f"   üîÑ Th·ª≠ x√≥a dashboard ID: {dashboard_id}, UID: {dashboard_uid}")
    
    # Ph∆∞∆°ng ph√°p 1: X√≥a b·∫±ng UID
    try:
        delete_url = f"{GRAFANA_URL}/api/dashboards/uid/{dashboard_uid}"
        
        if auth_token == "basic_auth":
            response = requests.delete(
                delete_url,
                auth=(GRAFANA_USER, GRAFANA_PASSWORD),
                timeout=10
            )
        else:
            headers = {"Authorization": f"Bearer {auth_token}"}
            response = requests.delete(delete_url, headers=headers, timeout=10)
        
        if response.status_code == 200:
            print(f"   ‚úÖ X√≥a th√†nh c√¥ng b·∫±ng UID")
            return True
        else:
            print(f"   ‚ùå L·ªói x√≥a b·∫±ng UID: {response.status_code}")
    except Exception as e:
        print(f"   ‚ùå L·ªói x√≥a b·∫±ng UID: {e}")
    
    # Ph∆∞∆°ng ph√°p 2: X√≥a b·∫±ng ID
    try:
        delete_url = f"{GRAFANA_URL}/api/dashboards/id/{dashboard_id}"
        
        if auth_token == "basic_auth":
            response = requests.delete(
                delete_url,
                auth=(GRAFANA_USER, GRAFANA_PASSWORD),
                timeout=10
            )
        else:
            headers = {"Authorization": f"Bearer {auth_token}"}
            response = requests.delete(delete_url, headers=headers, timeout=10)
        
        if response.status_code == 200:
            print(f"   ‚úÖ X√≥a th√†nh c√¥ng b·∫±ng ID")
            return True
        else:
            print(f"   ‚ùå L·ªói x√≥a b·∫±ng ID: {response.status_code}")
    except Exception as e:
        print(f"   ‚ùå L·ªói x√≥a b·∫±ng ID: {e}")
    
    # Ph∆∞∆°ng ph√°p 3: X√≥a b·∫±ng slug
    try:
        delete_url = f"{GRAFANA_URL}/api/dashboards/db/{dashboard_uid}"
        
        if auth_token == "basic_auth":
            response = requests.delete(
                delete_url,
                auth=(GRAFANA_USER, GRAFANA_PASSWORD),
                timeout=10
            )
        else:
            headers = {"Authorization": f"Bearer {auth_token}"}
            response = requests.delete(delete_url, headers=headers, timeout=10)
        
        if response.status_code == 200:
            print(f"   ‚úÖ X√≥a th√†nh c√¥ng b·∫±ng slug")
            return True
        else:
            print(f"   ‚ùå L·ªói x√≥a b·∫±ng slug: {response.status_code}")
    except Exception as e:
        print(f"   ‚ùå L·ªói x√≥a b·∫±ng slug: {e}")
    
    return False

def main():
    """H√†m ch√≠nh"""
    print("üßπ Script X√≥a Dashboard B·∫±ng Nhi·ªÅu Ph∆∞∆°ng Ph√°p")
    print("=" * 60)
    
    # Ki·ªÉm tra k·∫øt n·ªëi Grafana
    try:
        response = requests.get(f"{GRAFANA_URL}/api/health", timeout=5)
        if response.status_code != 200:
            print("‚ùå Grafana kh√¥ng ho·∫°t ƒë·ªông")
            sys.exit(1)
    except Exception as e:
        print(f"‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn Grafana: {e}")
        sys.exit(1)
    
    # L·∫•y token x√°c th·ª±c
    auth_token = get_grafana_auth()
    if not auth_token:
        print("‚ùå Kh√¥ng th·ªÉ l·∫•y token x√°c th·ª±c")
        sys.exit(1)
    
    # L·∫•y t·∫•t c·∫£ dashboard
    dashboards = get_all_dashboards(auth_token)
    if not dashboards:
        print("‚ùå Kh√¥ng th·ªÉ l·∫•y danh s√°ch dashboard")
        sys.exit(1)
    
    print(f"üìä T√¨m th·∫•y {len(dashboards)} dashboard")
    
    # Ph√¢n lo·∫°i dashboard
    keep_dashboard = None
    delete_dashboards = []
    
    for dashboard in dashboards:
        title = dashboard.get('title', 'Unknown')
        if title == KEEP_DASHBOARD:
            keep_dashboard = dashboard
        else:
            delete_dashboards.append(dashboard)
    
    # Hi·ªÉn th·ªã k·∫øt qu·∫£
    if keep_dashboard:
        print(f"\nüìã Dashboard s·∫Ω GI·ªÆ L·∫†I (1):")
        print(f"   ‚úÖ {keep_dashboard['title']} (ID: {keep_dashboard['id']})")
    else:
        print(f"\n‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y dashboard: {KEEP_DASHBOARD}")
    
    print(f"\nüóëÔ∏è Dashboard s·∫Ω X√ìA ({len(delete_dashboards)}):")
    for dash in delete_dashboards:
        print(f"   ‚ùå {dash['title']} (ID: {dash['id']})")
    
    # X√°c nh·∫≠n
    if not delete_dashboards:
        print("\n‚úÖ Kh√¥ng c√≥ dashboard n√†o c·∫ßn x√≥a!")
        return
    
    confirm = input(f"\nB·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a {len(delete_dashboards)} dashboard? (yes/no): ")
    
    if confirm.lower() != 'yes':
        print("‚ùå H·ªßy b·ªè thao t√°c")
        return
    
    # Th·ª±c hi·ªán x√≥a
    removed_count = 0
    print(f"\nüóëÔ∏è ƒêang x√≥a {len(delete_dashboards)} dashboard...")
    
    for dash in delete_dashboards:
        print(f"\nüîÑ X√≥a: {dash['title']} (ID: {dash['id']})")
        if force_delete_dashboard(dash['id'], dash['uid'], auth_token):
            removed_count += 1
            print(f"   ‚úÖ ƒê√£ x√≥a: {dash['title']}")
        else:
            print(f"   ‚ùå Kh√¥ng th·ªÉ x√≥a: {dash['title']}")
    
    print(f"\nüìä K·∫øt qu·∫£: ƒê√£ x√≥a {removed_count}/{len(delete_dashboards)} dashboard")
    
    if keep_dashboard:
        print(f"‚úÖ Gi·ªØ l·∫°i dashboard: {keep_dashboard['title']}")
    
    print("\nüîó Truy c·∫≠p Grafana: http://localhost:3000")
    print("üë§ ƒêƒÉng nh·∫≠p: admin / admin123")

if __name__ == "__main__":
    main()
