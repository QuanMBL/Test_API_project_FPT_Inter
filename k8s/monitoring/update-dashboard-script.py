#!/usr/bin/env python3
"""
Script c·∫£i ti·∫øn ƒë·ªÉ c·∫≠p nh·∫≠t dashboard c≈© thay v√¨ t·∫°o m·ªõi
T√¨m ki·∫øm dashboard theo title v√† c·∫≠p nh·∫≠t n·∫øu t·ªìn t·∫°i
"""

import requests
import json
import os
import sys
from pathlib import Path

# C·∫•u h√¨nh Grafana
GRAFANA_URL = "http://localhost:3000"
GRAFANA_USER = "admin"
GRAFANA_PASSWORD = "admin123"

def get_grafana_auth():
    """L·∫•y token x√°c th·ª±c t·ª´ Grafana"""
    try:
        response = requests.get(
            f"{GRAFANA_URL}/api/org",
            auth=(GRAFANA_USER, GRAFANA_PASSWORD),
            timeout=10
        )
        
        if response.status_code == 200:
            print("‚úÖ S·ª≠ d·ª•ng x√°c th·ª±c c∆° b·∫£n")
            return "basic_auth"
        else:
            print(f"‚ùå X√°c th·ª±c c∆° b·∫£n th·∫•t b·∫°i: {response.status_code}")
            return None
    except Exception as e:
        print(f"‚ùå L·ªói x√°c th·ª±c: {e}")
        return None

def find_dashboard_by_title(title, auth_token):
    """T√¨m dashboard theo title"""
    try:
        search_url = f"{GRAFANA_URL}/api/search?query={title}&type=dash-db"
        
        if auth_token == "basic_auth":
            response = requests.get(
                search_url,
                auth=(GRAFANA_USER, GRAFANA_PASSWORD),
                timeout=10
            )
        else:
            headers = {"Authorization": f"Bearer {auth_token}"}
            response = requests.get(search_url, headers=headers, timeout=10)
        
        if response.status_code == 200:
            dashboards = response.json()
            for dashboard in dashboards:
                if dashboard.get('title') == title:
                    return dashboard
        return None
    except Exception as e:
        print(f"‚ùå L·ªói t√¨m ki·∫øm dashboard: {e}")
        return None

def get_dashboard_by_id(dashboard_id, auth_token):
    """L·∫•y th√¥ng tin chi ti·∫øt dashboard theo ID"""
    try:
        get_url = f"{GRAFANA_URL}/api/dashboards/uid/{dashboard_id}"
        
        if auth_token == "basic_auth":
            response = requests.get(
                get_url,
                auth=(GRAFANA_USER, GRAFANA_PASSWORD),
                timeout=10
            )
        else:
            headers = {"Authorization": f"Bearer {auth_token}"}
            response = requests.get(get_url, headers=headers, timeout=10)
        
        if response.status_code == 200:
            return response.json()
        return None
    except Exception as e:
        print(f"‚ùå L·ªói l·∫•y dashboard: {e}")
        return None

def update_dashboard(dashboard_data, auth_token, existing_dashboard=None):
    """C·∫≠p nh·∫≠t dashboard c≈© ho·∫∑c t·∫°o m·ªõi"""
    
    # Chu·∫©n b·ªã payload
    if existing_dashboard:
        # C·∫≠p nh·∫≠t dashboard c≈©
        dashboard_data['id'] = existing_dashboard['id']
        dashboard_data['uid'] = existing_dashboard['uid']
        dashboard_data['version'] = existing_dashboard.get('version', 1) + 1
        
        payload = {
            "dashboard": dashboard_data,
            "overwrite": True
        }
        
        # S·ª≠ d·ª•ng API update
        update_url = f"{GRAFANA_URL}/api/dashboards/db"
        print(f"üîÑ C·∫≠p nh·∫≠t dashboard c≈©: {existing_dashboard['title']} (ID: {existing_dashboard['id']})")
        
    else:
        # T·∫°o dashboard m·ªõi
        payload = {
            "dashboard": dashboard_data,
            "overwrite": True
        }
        
        # S·ª≠ d·ª•ng API import
        update_url = f"{GRAFANA_URL}/api/dashboards/import"
        print(f"üÜï T·∫°o dashboard m·ªõi: {dashboard_data['title']}")
    
    try:
        if auth_token == "basic_auth":
            response = requests.post(
                update_url,
                json=payload,
                auth=(GRAFANA_USER, GRAFANA_PASSWORD),
                timeout=30
            )
        else:
            headers = {
                "Authorization": f"Bearer {auth_token}",
                "Content-Type": "application/json"
            }
            response = requests.post(update_url, json=payload, headers=headers, timeout=30)
        
        if response.status_code == 200:
            result = response.json()
            if 'url' in result:
                dashboard_url = f"{GRAFANA_URL}{result['url']}"
                print(f"‚úÖ {'C·∫≠p nh·∫≠t' if existing_dashboard else 'T·∫°o'} dashboard th√†nh c√¥ng!")
                print(f"üìä URL Dashboard: {dashboard_url}")
            if 'id' in result:
                print(f"üÜî Dashboard ID: {result['id']}")
            return True
        else:
            print(f"‚ùå {'C·∫≠p nh·∫≠t' if existing_dashboard else 'T·∫°o'} dashboard th·∫•t b·∫°i: {response.status_code}")
            print(f"Chi ti·∫øt: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå L·ªói {'c·∫≠p nh·∫≠t' if existing_dashboard else 't·∫°o'} dashboard: {e}")
        return False

def import_or_update_dashboard(dashboard_file_path, auth_token):
    """Import ho·∫∑c c·∫≠p nh·∫≠t dashboard"""
    
    # ƒê·ªçc file dashboard
    if not dashboard_file_path.exists():
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file dashboard: {dashboard_file_path}")
        return False
    
    with open(dashboard_file_path, 'r', encoding='utf-8') as f:
        dashboard_data = json.load(f)
    
    # L·∫•y th√¥ng tin dashboard
    dashboard_info = dashboard_data.get('dashboard', dashboard_data)
    dashboard_title = dashboard_info.get('title', 'Unknown')
    
    print(f"üîç T√¨m ki·∫øm dashboard: {dashboard_title}")
    
    # T√¨m dashboard c≈©
    existing_dashboard = find_dashboard_by_title(dashboard_title, auth_token)
    
    if existing_dashboard:
        print(f"üìã T√¨m th·∫•y dashboard c≈©: {existing_dashboard['title']} (ID: {existing_dashboard['id']})")
        # L·∫•y th√¥ng tin chi ti·∫øt ƒë·ªÉ c√≥ version
        detailed_dashboard = get_dashboard_by_id(existing_dashboard['uid'], auth_token)
        if detailed_dashboard:
            existing_dashboard['version'] = detailed_dashboard['dashboard'].get('version', 1)
    else:
        print(f"üìã Kh√¥ng t√¨m th·∫•y dashboard c≈©, s·∫Ω t·∫°o m·ªõi")
    
    # C·∫≠p nh·∫≠t ho·∫∑c t·∫°o dashboard
    return update_dashboard(dashboard_info, auth_token, existing_dashboard)

def check_grafana_connection():
    """Ki·ªÉm tra k·∫øt n·ªëi ƒë·∫øn Grafana"""
    try:
        response = requests.get(f"{GRAFANA_URL}/api/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Grafana ƒëang ho·∫°t ƒë·ªông")
            return True
        else:
            print(f"‚ùå Ki·ªÉm tra s·ª©c kh·ªèe Grafana th·∫•t b·∫°i: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn Grafana: {e}")
        print("H√£y ƒë·∫£m b·∫£o Grafana ƒëang ch·∫°y tr√™n http://localhost:3000")
        return False

def main():
    """H√†m ch√≠nh"""
    print("üöÄ Script C·∫≠p Nh·∫≠t Dashboard - Kh√¥ng T·∫°o Dashboard Tr√πng L·∫∑p")
    print("=" * 70)
    
    # Ki·ªÉm tra k·∫øt n·ªëi Grafana
    if not check_grafana_connection():
        sys.exit(1)
    
    # L·∫•y token x√°c th·ª±c
    auth_token = get_grafana_auth()
    if not auth_token:
        print("‚ùå Kh√¥ng th·ªÉ l·∫•y token x√°c th·ª±c")
        sys.exit(1)
    
    # Danh s√°ch dashboard c·∫ßn c·∫≠p nh·∫≠t
    dashboards = [
        {
            "name": "All 4 API Simple Dashboard",
            "file": "all_4api_1_simple_dashboard.json",
            "description": "T·ªïng quan 4 API Services c∆° b·∫£n"
        },
        {
            "name": "All 4 API Enhanced Dashboard", 
            "file": "all_4api_1_v2_enhanced_dashboard.json",
            "description": "T·ªïng quan 4 API Services v·ªõi b·∫£ng d·ªØ li·ªáu"
        },
        {
            "name": "CPU Resource Dashboard",
            "file": "comprehensive-cpu-resource-dashboard.json", 
            "description": "Gi√°m s√°t CPU v√† t√†i nguy√™n chi ti·∫øt"
        },
        {
            "name": "Custom Blue Dashboard",
            "file": "custom_blue_dashboard.json",
            "description": "Dashboard t√πy ch·ªânh m√†u xanh"
        }
    ]
    
    base_path = Path(__file__).parent.parent.parent / "monitoring" / "grafana" / "dashboards"
    
    success_count = 0
    total_count = len(dashboards)
    
    for dashboard in dashboards:
        print(f"\n{'='*50}")
        print(f"üìä X·ª≠ l√Ω: {dashboard['name']}")
        print(f"üìù M√¥ t·∫£: {dashboard['description']}")
        
        dashboard_path = base_path / dashboard['file']
        
        if import_or_update_dashboard(dashboard_path, auth_token):
            success_count += 1
            print(f"‚úÖ Th√†nh c√¥ng: {dashboard['name']}")
        else:
            print(f"‚ùå Th·∫•t b·∫°i: {dashboard['name']}")
    
    print(f"\n{'='*70}")
    print(f"üìä K·∫øt qu·∫£: {success_count}/{total_count} dashboard ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng")
    
    if success_count == total_count:
        print("\nüéâ T·∫•t c·∫£ dashboard ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!")
        print("üîó Truy c·∫≠p Grafana t·∫°i: http://localhost:3000")
        print("üë§ ƒêƒÉng nh·∫≠p: admin / admin123")
    else:
        print(f"\n‚ö†Ô∏è C√≥ {total_count - success_count} dashboard th·∫•t b·∫°i")
        sys.exit(1)

if __name__ == "__main__":
    main()
