#!/usr/bin/env python3
"""
Script ƒë·ªÉ t·∫°o CPU load th·∫≠t cho testing
"""

import requests
import time
import threading
import random

def cpu_intensive_request(api_url):
    """T·∫°o request c√≥ CPU intensive"""
    try:
        # T·∫°o request v·ªõi data l·ªõn ƒë·ªÉ tƒÉng CPU usage
        large_data = {
            'name': 'test_' + 'x' * 1000,  # Data l·ªõn
            'description': 'CPU test ' + 'y' * 2000,  # Data r·∫•t l·ªõn
            'items': [{'id': i, 'value': f'item_{i}' * 100} for i in range(100)]  # Array l·ªõn
        }
        
        # POST request v·ªõi data l·ªõn
        response = requests.post(f"{api_url}/", json=large_data, timeout=10)
        return response.status_code
    except Exception as e:
        return f"Error: {e}"

def create_cpu_load():
    """T·∫°o CPU load cho t·∫•t c·∫£ APIs"""
    apis = [
        'http://localhost:8000',  # user-api
        'http://localhost:8001',  # product-api  
        'http://localhost:8002',  # order-api
        'http://localhost:8003'   # payment-api
    ]
    
    print("üî• B·∫Øt ƒë·∫ßu t·∫°o CPU load...")
    
    # T·∫°o nhi·ªÅu threads ƒë·ªÉ tƒÉng CPU usage
    threads = []
    for i in range(50):  # 50 concurrent requests
        for api in apis:
            thread = threading.Thread(target=cpu_intensive_request, args=(api,))
            threads.append(thread)
            thread.start()
            time.sleep(0.1)  # Ngh·ªâ 0.1s gi·ªØa c√°c requests
    
    # Ch·ªù t·∫•t c·∫£ threads ho√†n th√†nh
    for thread in threads:
        thread.join()
    
    print("‚úÖ CPU load test ho√†n th√†nh!")

if __name__ == "__main__":
    create_cpu_load()
